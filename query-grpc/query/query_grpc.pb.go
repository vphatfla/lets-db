// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: query/query.proto

package queryService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueryService_ProcessQuery_FullMethodName      = "/queryService.QueryService/ProcessQuery"
	QueryService_StreamResult_FullMethodName      = "/queryService.QueryService/StreamResult"
	QueryService_StreamingQuery_FullMethodName    = "/queryService.QueryService/StreamingQuery"
	QueryService_StreamingBidirect_FullMethodName = "/queryService.QueryService/StreamingBidirect"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Process the query and return data result
	ProcessQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error)
	// Server-to-client streaming
	StreamResult(ctx context.Context, in *Query, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Result], error)
	// Client-to-server streaming
	StreamingQuery(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Query, Result], error)
	// Bi-directional streaming
	StreamingBidirect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Query, Result], error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) ProcessQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, QueryService_ProcessQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) StreamResult(ctx context.Context, in *Query, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Result], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[0], QueryService_StreamResult_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Query, Result]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_StreamResultClient = grpc.ServerStreamingClient[Result]

func (c *queryServiceClient) StreamingQuery(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Query, Result], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[1], QueryService_StreamingQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Query, Result]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_StreamingQueryClient = grpc.ClientStreamingClient[Query, Result]

func (c *queryServiceClient) StreamingBidirect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Query, Result], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[2], QueryService_StreamingBidirect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Query, Result]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_StreamingBidirectClient = grpc.BidiStreamingClient[Query, Result]

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility.
type QueryServiceServer interface {
	// Process the query and return data result
	ProcessQuery(context.Context, *Query) (*Result, error)
	// Server-to-client streaming
	StreamResult(*Query, grpc.ServerStreamingServer[Result]) error
	// Client-to-server streaming
	StreamingQuery(grpc.ClientStreamingServer[Query, Result]) error
	// Bi-directional streaming
	StreamingBidirect(grpc.BidiStreamingServer[Query, Result]) error
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServiceServer struct{}

func (UnimplementedQueryServiceServer) ProcessQuery(context.Context, *Query) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessQuery not implemented")
}
func (UnimplementedQueryServiceServer) StreamResult(*Query, grpc.ServerStreamingServer[Result]) error {
	return status.Errorf(codes.Unimplemented, "method StreamResult not implemented")
}
func (UnimplementedQueryServiceServer) StreamingQuery(grpc.ClientStreamingServer[Query, Result]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingQuery not implemented")
}
func (UnimplementedQueryServiceServer) StreamingBidirect(grpc.BidiStreamingServer[Query, Result]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingBidirect not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}
func (UnimplementedQueryServiceServer) testEmbeddedByValue()                      {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_ProcessQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ProcessQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ProcessQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ProcessQuery(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_StreamResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).StreamResult(m, &grpc.GenericServerStream[Query, Result]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_StreamResultServer = grpc.ServerStreamingServer[Result]

func _QueryService_StreamingQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryServiceServer).StreamingQuery(&grpc.GenericServerStream[Query, Result]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_StreamingQueryServer = grpc.ClientStreamingServer[Query, Result]

func _QueryService_StreamingBidirect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryServiceServer).StreamingBidirect(&grpc.GenericServerStream[Query, Result]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_StreamingBidirectServer = grpc.BidiStreamingServer[Query, Result]

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queryService.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessQuery",
			Handler:    _QueryService_ProcessQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamResult",
			Handler:       _QueryService_StreamResult_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingQuery",
			Handler:       _QueryService_StreamingQuery_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingBidirect",
			Handler:       _QueryService_StreamingBidirect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "query/query.proto",
}
